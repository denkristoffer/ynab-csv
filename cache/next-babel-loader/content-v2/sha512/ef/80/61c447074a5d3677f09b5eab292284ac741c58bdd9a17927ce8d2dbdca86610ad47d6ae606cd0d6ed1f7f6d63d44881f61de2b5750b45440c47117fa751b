{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useCallback, useMemo, useState } from \"react\";\nimport { parse } from \"papaparse\";\nimport dayjs from \"dayjs\";\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\ndayjs.extend(customParseFormat);\nimport { useAsyncState } from \"../lib/hooks\";\nimport Dropzone from \"../components/dropzone\";\nimport Table from \"../components/table\";\nimport Td from \"../components/tableCell\";\nimport DownloadButton from \"../components/downloadButton\";\n\nvar downloadUrlAsFile = function downloadUrlAsFile(objectUrl, filename) {\n  return new Promise(function (resolve, _reject) {\n    var a = document.createElement(\"a\");\n    a.download = filename;\n    a.href = objectUrl;\n    document.body.append(a);\n    a.click();\n    a.remove();\n    resolve();\n  });\n};\n\nvar downloadStringAsFile = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(string, filename) {\n    var file, url;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            file = new Blob([string], {\n              type: \"text/csv;charset=utf-8;\"\n            });\n            url = URL.createObjectURL(file);\n            _context.next = 4;\n            return downloadUrlAsFile(url, filename);\n\n          case 4:\n            URL.revokeObjectURL(url);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function downloadStringAsFile(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar Th = function Th(props) {\n  return __jsx(Td, _extends({\n    className: \"text-left font-semibold px-0\",\n    element: \"th\"\n  }, props));\n};\n\nvar isDkb = function isDkb(text) {\n  var lines = text.split(\"\\n\");\n  var regexp = new RegExp(/\"Kontonummer:\";\"/);\n  var matches = regexp.exec(lines[0]);\n  return matches !== null;\n};\n/**\n * Discards the lines with additional info that DKB adds to CSV exports\n *\n * @param string\n */\n\n\nvar cleanDkb = function cleanDkb(text) {\n  var lines = text.split(\"\\n\");\n  var wantedLines = lines.slice(6);\n  return wantedLines.join(\"\\n\");\n};\n\nvar SAMPLE_DATA_ROWS = 10;\nexport default function IndexPage() {\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useAsyncState = useAsyncState([]),\n      _useAsyncState2 = _slicedToArray(_useAsyncState, 2),\n      data = _useAsyncState2[0],\n      setData = _useAsyncState2[1];\n\n  var _useState2 = useState([]),\n      csvColumns = _useState2[0],\n      setCsvColumns = _useState2[1];\n\n  var _useState3 = useState({\n    Date: \"\",\n    Payee: \"\",\n    Memo: \"\",\n    Outflow: \"\",\n    Inflow: \"\"\n  }),\n      csvColumnMap = _useState3[0],\n      setCsvColumnMap = _useState3[1];\n\n  var isTransformed = useMemo(function () {\n    return Object.values(csvColumnMap).some(function (value) {\n      return value !== \"\";\n    });\n  }, [csvColumnMap]);\n  var parseCsv = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file) {\n      var preview,\n          text,\n          _args2 = arguments;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              preview = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : true;\n              setCsvColumns([]);\n              setCsvColumnMap({\n                Date: \"\",\n                Payee: \"\",\n                Memo: \"\",\n                Outflow: \"\",\n                Inflow: \"\"\n              });\n              setData([]);\n              _context2.next = 6;\n              return file.text();\n\n            case 6:\n              text = _context2.sent;\n\n              if (isDkb(text)) {\n                text = cleanDkb(text);\n              }\n\n              parse(text, {\n                header: true,\n                preview: preview ? SAMPLE_DATA_ROWS : undefined,\n                skipEmptyLines: \"greedy\",\n                step: function step(_ref3, parser) {\n                  var row = _ref3.data,\n                      errors = _ref3.errors;\n\n                  if (errors.length > 0) {\n                    console.error(errors);\n                    parser.abort();\n                  }\n\n                  setData(data.current.concat(row));\n                },\n                transform: function transform(value) {\n                  return value.trim();\n                },\n                transformHeader: function transformHeader(header) {\n                  if (header.trim().length === 0) {\n                    header = \"Unnamed column\";\n                  }\n\n                  if (csvColumns.includes(header)) {\n                    var newHeader = header;\n                    var counter = 0;\n\n                    while (csvColumns.includes(newHeader)) {\n                      counter = counter + 1;\n                      newHeader = \"\".concat(header, \" (\").concat(counter, \")\");\n                    }\n\n                    header = newHeader;\n                  }\n\n                  setCsvColumns(function (existingColumns) {\n                    return [].concat(_toConsumableArray(existingColumns), [header]);\n                  });\n                  return header;\n                }\n              });\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [csvColumns, data, setData]);\n  var transformRow = useCallback(function (row) {\n    return Object.keys(csvColumnMap).map(function (key) {\n      var column = key;\n      var columnInData = csvColumnMap[column];\n      var cell = row[columnInData];\n\n      if (cell) {\n        switch (column) {\n          case \"Date\":\n            {\n              cell = dayjs(cell, [\"DD-MM-YYYY\", \"MM-DD-YYYY\", \"YYYY-MM-DD\"]).format(\"YYYY-MM-DD\");\n              break;\n            }\n\n          case \"Outflow\":\n            {\n              if (csvColumnMap[\"Outflow\"] === csvColumnMap[\"Inflow\"]) {\n                cell = cell.startsWith(\"-\") ? cell.slice(1) : \"\";\n              }\n\n              break;\n            }\n\n          case \"Inflow\":\n            {\n              if (csvColumnMap[\"Outflow\"] === csvColumnMap[\"Inflow\"]) {\n                cell = cell.startsWith(\"-\") ? \"\" : cell;\n              }\n\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        return cell;\n      }\n\n      return \"\";\n    });\n  }, [csvColumnMap]);\n  var previewData = useMemo(function () {\n    var rows = data.current.length > 10 ? data.current.slice(0, 10) : data.current;\n    return rows.map(function (row) {\n      return transformRow(row);\n    });\n  }, [data, transformRow]);\n  var buildCsvFromRows = useCallback(function (dataToBuild) {\n    var columns = Object.keys(csvColumnMap);\n    var rows = dataToBuild.map(function (row) {\n      return transformRow(row).map(function (cell) {\n        // Escape any existing quotes in the cell\n        var cellWithEscapedQuotes = cell.replace(/\"/g, '\"\"');\n        return \"\\\"\".concat(cellWithEscapedQuotes, \"\\\"\");\n      });\n    });\n    var string = columns.map(function (column) {\n      return \"\\\"\".concat(column, \"\\\"\");\n    }).join(\",\") + \"\\n\" + rows.join(\"\\n\");\n    return string;\n  }, [csvColumnMap, transformRow]);\n  var hasData = data.current.length > 0;\n  var ynabColumns = Object.keys(csvColumnMap);\n  return __jsx(\"div\", {\n    className: \"container h-full w-full bg-white max-w-none dark:bg-gray-800\"\n  }, __jsx(Dropzone, {\n    hasFile: hasData,\n    onDrop: parseCsv\n  }, hasData ? __jsx(\"div\", {\n    className: \"flex flex-col h-full\"\n  }, isTransformed ? __jsx(DownloadButton, {\n    isActive: isLoading,\n    onClick: function onClick() {\n      setIsLoading(true);\n      var csv = buildCsvFromRows(data.current);\n      setIsLoading(false);\n      void downloadStringAsFile(csv, \"ynab-data.csv\");\n    }\n  }) : null, __jsx(Table, {\n    data: isTransformed ? previewData : [],\n    header: __jsx(\"thead\", null, __jsx(\"tr\", {\n      className: \"bg-gray-100 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-600\"\n    }, ynabColumns.map(function (column) {\n      return __jsx(Th, {\n        key: column\n      }, __jsx(\"div\", null, column), __jsx(\"div\", null, __jsx(\"select\", {\n        className: \"w-full\",\n        onChange: function onChange(event) {\n          var value = event.target.value || \"\";\n          setCsvColumnMap(function (current) {\n            return _objectSpread(_objectSpread({}, current), {}, _defineProperty({}, column, value));\n          });\n        }\n      }, __jsx(\"option\", {\n        value: \"\"\n      }, \"Select column\\u2026\"), csvColumns.map(function (column) {\n        return __jsx(\"option\", {\n          key: column,\n          value: column\n        }, column);\n      }))));\n    })))\n  }), __jsx(\"div\", {\n    className: \"flex items-center h-full w-full\"\n  }, __jsx(\"p\", {\n    className: \"text-center w-full dark:text-white\"\n  }, isTransformed ? \"Previewing the first \".concat(SAMPLE_DATA_ROWS, \" rows.\") : \"Select columns to preview data.\"))) : null));\n}","map":null,"metadata":{},"sourceType":"module"}